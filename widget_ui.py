"""
–û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: –ø–ª–∞–≤–∞—é—â–∏–π –æ–≤–µ—Ä–ª–µ–π —Å –ø–æ–≥–æ–¥–æ–π –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
"""

import tkinter as tk
import requests
import logging
from typing import Optional, Tuple
import psutil
import sys

from config import (
    setup_logging, 
    load_config, 
    save_config, 
    WEATHER_ICONS, 
    WEATHER_INTERVAL_SEC, 
    METRICS_INTERVAL_MS, 
    ALPHA_DEFAULT,
    API_URL
)

from geocode import geocode_city, detect_city_by_ip
from tray import create_tray_icon
from metrics import init_counters, update_metrics

class WeatherWidget(tk.Tk):
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–æ–π –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    
    def __init__(self) -> None:
        super().__init__()
        setup_logging()
        self.cfg = load_config()
        self.drag_locked = False
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ä–æ–¥–∞
        city = self.cfg.get("city") or detect_city_by_ip()
        self._set_city(city)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.alpha = self.cfg.get("alpha", ALPHA_DEFAULT)
        self._init_ui()
        self._init_tray()
        self._init_counters()
        
        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.after(0, self._update_weather)
        self.after(0, self._update_metrics)

    def _set_city(self, city: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∫–æ–Ω—Ñ–∏–≥"""

        try:
            lat, lon = geocode_city(city)
            self.cfg.update({"city": city, "lat": lat, "lon": lon})

        except ValueError:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è '%s'", city)

        save_config(self.cfg)

    def _init_ui(self) -> None:

        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

        self.overrideredirect(True)
        self.attributes("-topmost", True)
        self.attributes("-alpha", self.alpha)
        self.geometry("650x30+100+100")
        self.configure(bg="#1a1a1a")
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ—Ä–µ–π–º –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
        self.frame = tk.Frame(self, bg="#1a1a1a")
        self.frame.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–≥–æ–¥—ã –∏ –º–µ—Ç—Ä–∏–∫
        self.weather_label = self._create_label()
        self.cpu_label = self._create_label()
        self.ram_label = self._create_label()
        self.net_label = self._create_label()
        
        # –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self.lock_button = self._create_lock_button(self.frame)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        self.bind("<ButtonPress-1>", self._on_drag_start)
        self.bind("<B1-Motion>", self._on_drag)

    def _create_label(self) -> tk.Label:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        label = tk.Label(
            master=self.frame,  # –¢–µ–ø–µ—Ä—å self.frame —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            bg="#1a1a1a",
            fg="#ffffff",
            font=("Segoe UI", 12, "bold")
        )
        label.pack(side=tk.LEFT, padx=8)
        return label

    def _create_lock_button(self, parent: tk.Frame) -> tk.Label:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–∫–Ω–∞"""
        lock_btn = tk.Label(
            parent,
            text="üìå",
            bg="#1a1a1a",
            fg="#ffffff",
            font=("Segoe UI", 12)
        )
        lock_btn.pack(side=tk.LEFT, padx=8)
        lock_btn.bind("<Button-1>", self._toggle_lock)
        return lock_btn

    def _init_tray(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∫–æ–Ω–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ"""
        self.tray_icon = create_tray_icon(self)

    def _init_counters(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.last_network_io, self.last_time = init_counters()

    def _update_weather(self) -> None:
        """–ó–∞–ø—Ä–æ—Å –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
        lat, lon = self.cfg.get("lat"), self.cfg.get("lon")
        logging.info("–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: lat=%s, lon=%s", lat, lon)
        
        if lat is not None and lon is not None:
            try:
                response = requests.get(
                    API_URL,
                    params={
                        "latitude": lat,
                        "longitude": lon,
                        "current_weather": True,
                        "timezone": "Europe/Helsinki"
                    },
                    timeout=5
                )
                data = response.json().get("current_weather", {})
                
                icon = WEATHER_ICONS.get(data.get("weathercode", 0), "üåê")
                temp = data.get("temperature", "?")
                wind = data.get("windspeed", "?")
                self.weather_label.config(text=f"{icon} {temp}¬∞C  {wind} m/s")
                logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–≥–æ–¥–∞: %s", self.weather_label.cget("text"))
                
            except requests.RequestException as e:
                logging.error("–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: %s", e)
                
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.after(WEATHER_INTERVAL_SEC * 1000, self._update_weather)

    def _update_metrics(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (CPU, RAM, —Å–µ—Ç—å)"""

        cpu, ram, sent, recv, now = update_metrics(self.last_network_io, self.last_time)
        self.last_network_io, self.last_time = psutil.net_io_counters(), now
        
        self.cpu_label.config(text=f"CPU: {cpu:.1f}%")
        self.ram_label.config(text=f"RAM: {ram:.1f}%")
        self.net_label.config(text=f"Net: ‚Üë{sent:.1f} ‚Üì{recv:.1f} KB/s")
        
        self.after(METRICS_INTERVAL_MS, self._update_metrics)

    def _open_settings(self) -> None:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        dlg = tk.Toplevel(self)
        dlg.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        dlg.geometry("300x200")
        dlg.configure(bg="#2a2a2a")
        dlg.resizable(False, False)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
        tk.Label(dlg, text="–ì–æ—Ä–æ–¥:", bg="#2a2a2a", fg="#ffffff").pack(pady=(10, 0))
        city_var = tk.StringVar(value=self.cfg.get("city", ""))
        tk.Entry(dlg, textvariable=city_var).pack(fill=tk.X, padx=20)
        
        # –ü–æ–ª–∑—É–Ω–æ–∫ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        tk.Label(dlg, text="–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:", bg="#2a2a2a", fg="#ffffff").pack(pady=(10, 0))
        alpha_var = tk.DoubleVar(value=self.alpha)
        tk.Scale(
            dlg,
            from_=0.1,
            to=1.0,
            variable=alpha_var,
            orient=tk.HORIZONTAL,
            resolution=0.01,
            bg="#2a2a2a"
        ).pack(fill=tk.X, padx=20)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        def save_and_close() -> None:
            self._set_city(city_var.get().strip())
            self.alpha = alpha_var.get()
            self.attributes("-alpha", self.alpha)
            self.cfg["alpha"] = self.alpha
            save_config(self.cfg)
            dlg.destroy()
            
        tk.Button(
            dlg,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            command=save_and_close,
            bg="#4a4a4a",
            fg="#ffffff"
        ).pack(pady=20)

    def _on_drag_start(self, event: tk.Event) -> None:
        """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞"""
        if self.drag_locked:
            return
        self._drag_x, self._drag_y = event.x, event.y

    def _on_drag(self, event: tk.Event) -> None:
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–∫–Ω–∞ –ø—Ä–∏ –∑–∞–∂–∞—Ç–æ–π –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–µ –º—ã—à–∏"""
        if self.drag_locked:
            return
        x = self.winfo_pointerx() - self._drag_x
        y = self.winfo_pointery() - self._drag_y
        self.geometry(f"+{x}+{y}")

    def _quit(self) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.tray_icon.stop()
        self.destroy()
        sys.exit(0)

    def _toggle_lock(self, event=None) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–∫–Ω–∞"""
        self.drag_locked = not self.drag_locked
        self.lock_button.config(fg="#ff4444" if self.drag_locked else "#ffffff")
        
        if self.drag_locked:
            # –û—Ç–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            self.unbind("<ButtonPress-1>")
            self.unbind("<B1-Motion>")
        else:
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–æ–∫
            self.bind("<ButtonPress-1>", self._on_drag_start)
            self.bind("<B1-Motion>", self._on_drag)


WeatherWidget().mainloop()